# -------------------------------------------------------------------
# Loki source transformation configurations
# -------------------------------------------------------------------
# This file contains configurations for multiple source transformation
# pipelines and batch processing settings to apply Loki transformations
# to the ecrad source tree.


# Loki batch scheduler configuration
# -------------------------------------------------------------------
# The Loki batch scheduler performs automated discovery of call trees
# from a select set of seed subroutines. Whenever it adds new
# nodes to the call tree, the following default behaviour will be
# honoured, unless it is specifically overwritten below.

[default]
role = 'kernel'  # Role to determine how to transform a routine
expand = true  # Automatically expand call tree to subroutine calls
strict = true  # Throw exceptions during dicovery
enable_imports = true  # Chase dependencies incurred via imports

# Ensure that we are never adding these to the tree, and thus
# do not attempt to look up the source files for these.
disable = [
  'delta_eddington*', 'fast_expm_exchange', 'date_and_time', 'get_command',
  'rng_type', 'radiation_reverse', 'yomhook', 'netcdf', 'ec_lun', 'get_host_data_*'
]

# Prune these modules from the tree to ensure they are not processed by
# transformations
ignore = ['parkind1', 'easy_netcdf', 'field_module', 'mpl_module']


# Frontend argument overrides
# -------------------------------------------------------------------
# Certain modules hard depend on preprocessing
[frontend_args]

[frontend_args."radiation_scheme_layer.F90"]
  preprocess = true

[frontend_args."radiation_random_numbers.F90"]
  preprocess = true

[frontend_args."radiation_spartacus_sw.F90"]
  preprocess = true

[frontend_args."radiation_two_stream.F90"]
  preprocess = true


# Call tree entry points ("driver" subroutines)
# -------------------------------------------------------------------
#
# Note that Loki differentiates between "driver" routines, which act as
# call tree roots and contain the offload and parallelisation loops, and
# "kernel" routines that only contain compute loops and are called
# from drivers or other kernels within parallel sections.
[routines]

[routines.radiation_scheme_layer]
  role = 'driver'
  expand = true


# Define specific transformation settings
# -------------------------------------------------------------------
# The section configures the invididual steps of the transformation
# pipelines. Importantly, it also defines the class name and Python
# module that Transformation objects will be instatiated from.
[transformations]

# A set of utility transformations
# -------------------------------------------------------------------
[transformations.Idem]
  classname = 'IdemTransformation'
  module = 'loki.transformations'

[transformations.RemoveCode]
  classname = 'RemoveCodeTransformation'
  module = 'loki.transformations'

# Housekeeping and other transformations
# -------------------------------------------------------------------
[transformations.Sanitise]
  classname = 'SanitiseTransformation'
  module = 'loki.transformations'
  options = { resolve_associate_mappings = true }

[transformations.FileWriteTransformation]
  classname = 'FileWriteTransformation'
  module = 'loki.transformations'
  options = { include_module_var_imports = true }


# Full transformation pipelines
# -------------------------------------------------------------------
# The entries below are mapped to the "mode" entry point in
# loki-transform.py. The define the set of transformation and the
# order in which they are applies to the complete call tree.
[pipelines]

[pipelines.idem]
  transformations = ['Idem']

[pipelines.remove_code]
  transformations = ['RemoveCode']
